{"version":3,"sources":["large.js","SvelteGanttReact.js","App.js","reportWebVitals.js","index.js"],"names":["time","input","moment","colors","generation","generate","rows","tasks","ids","Array","keys","array","i","length","j","Math","floor","random","temp","shuffle","rand_bool","push","id","label","age","enableDragging","imageSrc","classes","undefined","rand_h","rand_d","type","resourceId","from","to","SvelteGanttReact","nextProps","this","instance","$set","SvelteGantt","target","element","props","api","on","change","data","console","log","React","createElement","style","height","ref","e","Component","currentStart","currentEnd","options","timeRanges","headers","unit","format","fitWidth","tableHeaders","title","property","width","tableWidth","ganttTableModules","SvelteGanttTable","ganttBodyModules","App","useState","opts","setOptions","onClick","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAEO,SAASA,EAAKC,GACjB,OAAOC,IAAOD,EAAO,SAGzB,IAAME,EAAS,CAAC,OAAQ,QAAS,UAC7BC,EAAa,EAYV,SAASC,IACZ,IAAMC,EAAO,GACPC,EAAQ,GAERC,EAAG,YAAOC,MAfL,KAeqBC,SAbpC,SAAiBC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,GASfC,CAAQX,GAER,IAAK,IAAII,EAAI,EAAGA,EAlBL,IAkBmBA,IAAK,CAAC,IAAD,EAC3BQ,EAAYL,KAAKE,SAAW,GAEhCX,EAAKe,MAAL,GACIC,GAAIV,EACJW,MAAO,QAAUX,EACjBY,IAAsB,GAAhBT,KAAKE,SAAiB,EAC5BQ,gBAAgB,EAChBC,SAAU,kBACVC,QAASP,EAAY,CAAC,qBAAkBQ,GAN5C,gCAOqBR,GAPrB,2BAQIhB,GARJ,IAWAgB,EAAYL,KAAKE,SAAW,GAE5B,IAAMY,EAA0B,GAAhBd,KAAKE,SAAiB,EAChCa,EAA0B,EAAhBf,KAAKE,SAAgB,EAErCV,EAAMc,KAAK,CACPU,KAAM,OACNT,GAAId,EAAII,GACRoB,WAAYpB,EACZW,MAAO,SAAWf,EAAII,GACtBqB,KAAMjC,EAAK,GAAD,OAAI,EAAI6B,EAAR,QACVK,GAAIlC,EAAK,GAAD,OAAI,EAAI6B,EAASC,EAAjB,QACRH,QAASxB,EAAQY,KAAKE,SAAWd,EAAOU,OAAU,GAClDT,eAMR,OAFAA,GAAc,EAEP,CAAEE,OAAMC,S,wCCpDN4B,G,MAAb,+KAEI,SAA0BC,GAEtBC,KAAKC,SAASC,KAAKH,KAJ3B,+BAOI,WAGIC,KAAKC,SAAW,IAAIE,IAAY,CAC5BC,OAAQJ,KAAKK,QACbC,MAAM,2BACCN,KAAKM,OADP,IAEDpC,MAAO8B,KAAKM,MAAMpC,MAClBD,KAAM+B,KAAKM,MAAMrC,SAKzB+B,KAAKC,SAASM,IAAIrC,MAAMsC,GAAGC,QAAO,gBAAEC,EAAF,2BAAYC,QAAQC,IAAI,wBAAyBF,MACnFV,KAAKO,IAAMP,KAAKC,SAASM,MArBjC,oBAwBI,WAAU,IAAD,OACL,OAAOM,IAAMC,cAAc,MAAO,CAC9BC,MAAO,CAAEC,OAAQ,QACjBC,IAAK,SAAAC,GACD,EAAKb,QAAUa,SA5B/B,GAAsCL,IAAMM,Y,OCAtCC,EAAezD,EAAK,SACpB0D,EAAa1D,EAAK,SAExB,EAAwBK,IAClBsD,EAAU,CACdrD,KAFF,EAAQA,KAGNC,MAHF,EAAcA,MAIZqD,WAAY,GACZC,QAAS,CAAC,CAAEC,KAAM,MAAOC,OAAQ,WAAa,CAAED,KAAM,OAAQC,OAAQ,SACtEC,UAAU,EACV/B,KAAMwB,EACNvB,GAAIwB,EACJO,aAAc,CAAC,CAAEC,MAAO,QAASC,SAAU,QAASC,MAAO,IAAKrC,KAAM,SACtEsC,WAAY,IACZC,kBAAmB,CAACC,KACpBC,iBAAkB,IAyBLC,MAtBf,WACE,MAA2BC,mBAASf,GAApC,mBAAOgB,EAAP,KAAaC,EAAb,KASA,OACE,gCACE,iCACE,wBAAQC,QAVd,WACE,MAAwBxE,IAAhBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdoD,EAAQrD,KAAOA,EACfqD,EAAQpD,MAAQA,EAChBqE,EAAW,eAAIjB,KAMX,0BAEF,qBAAKmB,UAAU,MAAM1B,MAAO,CAACC,OAAQ,SAArC,SACE,cAAC,EAAD,eAAsBsB,UC7BfI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d5cdc74e.chunk.js","sourcesContent":["import moment from 'moment';\n\nexport function time(input) {\n    return moment(input, 'HH:mm');\n}\n\nconst colors = ['blue', 'green', 'orange']\nlet generation = 0;\nlet rowCount = 100;\n\nfunction shuffle(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nexport function generate() {\n    const rows = [];\n    const tasks = [];\n\n    const ids = [...Array(rowCount).keys()];\n    shuffle(ids);\n\n    for (let i = 0; i < rowCount; i++) {\n        let rand_bool = Math.random() < 0.2;\n\n        rows.push({\n            id: i,\n            label: 'Row #' + i,\n            age: (Math.random() * 80) | 0,\n            enableDragging: true,\n            imageSrc: 'Content/joe.jpg',\n            classes: rand_bool ? ['row-disabled'] : undefined,\n            enableDragging: !rand_bool,\n            generation\n        });\n\n        rand_bool = Math.random() > 0.5;\n\n        const rand_h = (Math.random() * 10) | 0\n        const rand_d = (Math.random() * 5) | 0 + 1\n\n        tasks.push({\n            type: 'task',\n            id: ids[i],\n            resourceId: i,\n            label: 'Task #' + ids[i],\n            from: time(`${7 + rand_h}:00`),\n            to: time(`${7 + rand_h + rand_d}:00`),\n            classes: colors[(Math.random() * colors.length) | 0],\n            generation\n        });\n    }\n\n    generation += 1;\n\n    return { rows, tasks };\n}","import React from 'react';\nimport { SvelteGantt, SvelteGanttTable } from 'svelte-gantt';\nimport * as Moment from 'moment';\nimport 'svelte-gantt/css/svelteGantt.css';\n\n\n\nexport class SvelteGanttReact extends React.Component {\n\n    componentWillReceiveProps(nextProps) {\n        // pass new props to gantt\n        this.instance.$set(nextProps);\n    }\n\n    componentDidMount() {\n        // instantiate gantt\n        // copy options\n        this.instance = new SvelteGantt({\n            target: this.element,\n            props: {\n                ...this.props,\n                tasks: this.props.tasks,\n                rows: this.props.rows,\n            }\n        });\n\n        // expose api\n        this.instance.api.tasks.on.change(([data]) => console.log('Listener: task change', data));\n        this.api = this.instance.api;\n    }\n\n    render() {\n        return React.createElement(\"div\", {\n            style: { height: '100%' },\n            ref: e => {\n                this.element = e;\n            }\n        });\n    }\n}","import './App.css';\nimport { time, generate } from './large';\nimport React, { useState } from 'react';\n\nimport { SvelteGanttReact } from './SvelteGanttReact';\nimport { SvelteGanttTable } from 'svelte-gantt';\n\nconst currentStart = time('06:00');\nconst currentEnd = time('18:00');\n\nconst { rows, tasks } = generate();\nconst options = {\n  rows,\n  tasks,\n  timeRanges: [],\n  headers: [{ unit: 'day', format: 'MMMM Do' }, { unit: 'hour', format: 'H:mm' }],\n  fitWidth: true,\n  from: currentStart,\n  to: currentEnd,\n  tableHeaders: [{ title: 'Label', property: 'label', width: 140, type: 'tree' }],\n  tableWidth: 240,\n  ganttTableModules: [SvelteGanttTable],\n  ganttBodyModules: []\n}\n\nfunction App() {\n  const [opts, setOptions] = useState(options);\n\n  function regenerate() {\n    const { rows, tasks } = generate();\n    options.rows = rows;\n    options.tasks = tasks;\n    setOptions({...options});\n  }\n\n  return (\n    <div>\n      <header>\n        <button onClick={regenerate}>Regenerate</button>\n      </header>\n      <div className=\"App\" style={{height: '500px'}}>\n        <SvelteGanttReact {...opts} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}